---
title: "ENVS-193DS Final"
author: "Rebecca Martinez"
date: "June 12, 2025"
format:
  html: 
    toc: true 
    toc-floating: true
    warning: false 
    message: false 
    error: false
---

[**Veiw GitHub Repository**](https://github.com/RebeccaLMartinez/ENVS-193DS_spring-2025_final)

---

```{r setup,  message=FALSE, warning=FALSE, error=FALSE}

# --- necessary packages (possibly extra) ---

library(tidyverse)   # Basic necessity
library(here)        # File path management
library(janitor)     # Cleans names
library(readxl)      # Read Excel files
library(scales)      # Customize axis labels
library(ggeffects)   # For model predictions
library(ggthemes)    # For additional themes
library(flextable)   # Creates tables 
library(gtsummary)   # Summary tables
library(rstatix)     # Easy statistical tests
library(effectsize)  # Calculate effect sizes
library(lubridate)   # To work with dates
library(paletteer)   # Color package
library(DHARMa)      # Modeling
library(modelsummary)# Modeling multiple models
library(MuMIn)       # Model selection


# --- sea surface temperature data (problem 2) ---

sst <- read_csv(here("data", "sst_update2023.csv"))  



# --- Swift Parrot data (problem 3) ---

nest_boxes <- read_csv(here("data", "occdist.csv"))

```

# Problem 1. Research writing 

## a. Transparent statistical methods  

**In part 1**, they tested the null hypothesis of “no correlation” between distance from headwater (km) and nitrogen load (kg/year), which suggests they used Pearson’s correlation. When used along, this test can test if there is a correlation between two continuous variables by whether the correlation coefficient (r) differs from zero. 

**In part 2**, they compared average nitrogen loads across five sources (urban land, atmospheric deposition, fertilizer, wastewater treatment, and grasslands). Since they rejected the null hypothesis that all source means are equal and reported a p-value of 0.02, they likely used a one-way ANOVA, which is appropriate for testing differences in means across multiple categorical groups.


## b. More information needed  

1. Two additional tests should be run: Levene’s Test for Homogeneity of Variances to check if nitrogen load variation is similar across the sources (important because ANOVA assumes equal variances), and Shapiro-Wilk Test for Normality of Residuals to confirm if residuals are normally distributed (another key ANOVA assumption).

2. The report should also include more detailed statistics like the F value, degrees of freedom, effect size ($\eta^2$), and significance level ($\alpha$) for the ANOVA. For Levene’s and Shapiro-Wilk tests, the test statistics and p-values should be reported. This information adds transparency and helps readers assess the reliability of the results.

## c. Suggestions for rewriting 

**Part 1**  
A correlation was found between distance from the headwater (km) and annual total nitrogen load (kg year⁻¹), suggesting that nitrogen load changes with distance (*Pearson’s correlation*: r = correlation coefficient, t(df) = t-value, p = 0.03, CI[lower,upper], $\alpha$ = significance level).


**Part 2**  
Average nitrogen load (kg.yr) differed significantly among sources, including urban land, atmospheric deposition, fertilizer, wastewater treatment, and grasslands  (*one-way ANOVA*, F(df₁, df₂) = F-value, p = 0.02, $\theta^2$ = effect size, $\alpha$ = significance level). Assumptions of homogeneity of variances and normality were met (*Levene’s test*, F(df₁, df₂) = F-statistic, p > p-value; *Shapiro-Wilk test*, W = test statistic, p > p-value).

# Problem 2

## a. Cleaning and summarizing

```{r cleaning sst data}

sst_clean <- sst |> # new df using sst data
  # Convert data types
  mutate(
    date = as.Date(date, format = "%Y-%m-%d"),   # Format date as YYYY-MM-DD
    site = as.character(site),                   # Make site a character
    latitude = as.numeric(latitude),             # Make latitude numeric
    longitude = as.numeric(longitude),           # Make longitude numeric
    temp = as.numeric(temp)                      # Make temp numeric
  ) |>

  # Create year and month columns
  mutate(
    year = factor(format(date, "%Y"), levels = as.character(2018:2023)),  # Year as factor
    month = factor(format(date, "%b"), levels = month.abb, ordered = TRUE)  # Ordered month names
  ) |>
 drop_na() |>  # Remove rows with na

  group_by(year, month) |>  # Group by year and month

  summarise(
    mean_monthly_sst = mean(temp),  # Calculate mean temp for each group
    .groups = "drop"                # Ungroup after summarizing
  )

```


```{r data structure}

slice_sample(   # Preview n=5 rows of new df
  sst_clean,
  n = 5)

str(sst_clean) # View structure of new df

```

## b. Visualize the data


```{r line plot, warning=FALSE, error=FALSE}

ggplot(sst_clean, aes(x = month, y = mean_monthly_sst, group = factor(year), color = factor(year))) +
  geom_line(size = 0.8) +  # Add lines 
  geom_point() +  # Add points
  scale_color_paletteer_d("colRoz::sky", name = "Year") +  #  Discrete palette with gradient-like blue tones by year
      # Axes labels
  labs(
    y = "Mean monthly sea surface temperature (°C)",  # Y-axis label
    x = "Month"  # X-axis label
  ) +

  # Apply a clean black-and-white theme and customize appearance
  theme_bw(base_size = 12) +  # Use a simple, readable theme
  theme(
    panel.grid = element_blank(),  # Remove default gridlines
    legend.position = c(0.1, 0.75),  # Position legend inside plot
    axis.title.x = element_text(size = 14),  # Larger x-axis title
    axis.title.y = element_text(size = 14)   # Larger y-axis title
  )


```


# Problem 3. Data analysis

**Research Questions**

1. How do year (2016 or 2019) and distance from forest edge predict Swift Parrot (Lathamus discolor) nest box occupancy?

2. Is there a simpler model that explains Swift Parrot nest box occupancy, and if so, what is it?


```{r exploratory data, echo=FALSE}

# Clean and prepare the data
total_occupancy <- nest_boxes |> 
  clean_names() |>                  # Clean column names (snake_case)
  rename(swift_parrot = sp) |>      # Rename 'sp' to 'swift_parrot'
  mutate(
    season = as.factor(season),     # Convert 'season' to a factor
    swift_parrot = as.integer(swift_parrot) # Convert occupancy to integer (0 or 1)
  ) |>
  filter(swift_parrot == 1) |>    # Keep only occupied boxes
  group_by(season) |>             # Group data by season
  summarise(total = sum(swift_parrot), .groups = "drop")  # Sum occupied boxes per season


# Totals by season
ggplot(total_occupancy, aes(x = season, y = total, fill = season)) +
  geom_col() +                                       # Create bar plot for totals
  scale_fill_manual(values = c("2016" = "steelblue", "2019" = "orange4")) + # custom colors
  scale_y_continuous(expand = c(0, 0), limits = c(0, NA)) +  # Y-axis starts at zero, no expansion below 0
  labs(
    x = "Season",                                    # X-axis label
    y = "Total Swift Parrot Occupied Boxes",        # Y-axis label
    title = "Swift Parrot Nest Box Occupancy by Season"  # Plot title
  ) +
  theme_classic() +                                  # Clean classic theme
  theme(
    legend.position = "none",                        # Hide legend (colors shown on x-axis)
    plot.title = element_text(face = "bold", size = 14, hjust = 0.5),  # Title style, centered
    axis.title = element_text(face = "bold"),       # Bold axis titles
    axis.text = element_text(size = 12)              # Axis tick text size
  )


# clean for edge dist

edge_dist <- nest_boxes |> 
  clean_names() |>                                  # Clean column names again
  rename(swift_parrot = sp) |>                      # Rename for clarity
  mutate(
    season = as.factor(season),                      # Season as factor
    swift_parrot = as.integer(swift_parrot)          # Occupancy as integer
  ) |>  
  select(swift_parrot, season, edge_distance)  |>
  filter(swift_parrot == 1)# Select relevant columns


# Decide on bins with rice rule

n <- edge_dist |> 
  filter(swift_parrot == 1) |>        # Only occupied boxes
  nrow()                       # Count number of rows (occupied boxes)

rice_bins <- ceiling(2 * n^(1/3))   # Calculate bins using Rice Rule (2 * n^(1/3))


ggplot(edge_dist, aes(x = edge_distance, fill = season)) +         # Plot histogram of edge_distance colored by season
  geom_histogram(
    bins = rice_bins,                                              # Set number of bins using Rice Rule
    color = "black"                                                # Black border around histogram bars
  ) +
  facet_wrap(~season) +                                            # Separate plots by season
  scale_x_continuous(
    breaks = seq(from = 0, to = 1000, by = 200)                    # Set x-axis ticks every 200 meters
  ) +
  scale_y_continuous(
    expand = c(0, 0)                                               # Start y-axis at 0 with no padding
  ) +
  scale_fill_manual(
    values = c("2016" = "steelblue", "2019" = "orange4")             # Custom fill colors for seasons
  ) +
  labs(
    x = "Distance from Forest Edge (m)",                           # X-axis label
    y = "Count of Occupied Nest Boxes",                            # Y-axis label
    title = "Distribution of Occupied Nest Boxes by Edge Distance and Season"  # Plot title
  ) +
  theme_base() +                                                   # Use a clean minimal theme
  theme(
    axis.text = element_text(size = 14),                           # Increase size of axis text
    axis.text.x = element_text(angle = 90, hjust = 1),             # Rotate x-axis labels vertically
    axis.title = element_text(size = 16),                          # Increase size of axis titles
    plot.title = element_text(size = 18, face = "bold"),           # Bold and enlarge plot title
    legend.title = element_blank()                                 # Remove legend title
  )


```



## a. Response variable 

A `1` indicates that a nest box was occupied by a bird species during the observation period, meaning there was evidence such as adults, eggs, or nestlings. A `0` means the nest box was not occupied or showed no signs of nesting when checked.

## b. Purpose of study

The study focuses on the Swift Parrot, a critically endangered target species for which the nest boxes were deployed to aid conservation. In contrast, Common Starlings and Tree Martins are competitor species whose use of the boxes may reduce nesting opportunities for Swift Parrots, potentially undermining conservation efforts.

## c. Difference in “seasons” 

The two “seasons” refer to the years 2016 and 2019, representing the initial deployment of newly installed nest boxes and a later time point when the boxes had been established for several years. The study compares these seasons to examine how nest box use and species interactions may change over time as birds become familiar with the boxes.


## d. Table of models


### Model Table

| Model Number | Season | Distance to Forest Edge | Predictor List                      |
|--------------|--------|-------------------------|-------------------------------------|
| 0            |        |                         | No predictors (null model)          |
| 1            |   X    |            X            | All predictors (saturated model)    |
| 2            |   X    |                         | Season only                         |
| 3            |        |            X            | Distance to forest edge only        |


## e. Run the models 

```{r, cleaning nest_box data}

nest_boxes_clean <- nest_boxes |> 
  clean_names() |>                           # Clean column names to consistent lowercase snake_case
  rename(
    swift_parrot = sp,                      # Rename 'sp' column to 'swift_parrot'
  ) |> 
  mutate(
    season = as.factor(season),             # Convert 'season' to a factor (categorical)
    swift_parrot = as.integer(swift_parrot) # Convert 'swift_parrot' to integer (0/1 response)
  ) |> 
  select(swift_parrot, season, edge_distance) # Keep only the columns needed for modeling

```

```{r, fitting nest_box models}

# Null model: predicts Swift Parrot occupancy without any predictors (intercept only)
model0 <- glm(swift_parrot ~ 1, 
              data = nest_boxes_clean, 
              family = "binomial")

# Saturated model: predicts Swift Parrot occupancy using both season and edge distance
model1 <- glm(swift_parrot ~ season + edge_distance, 
              data = nest_boxes_clean, 
              family = "binomial")

# Model with season only: predicts Swift Parrot occupancy using season as predictor
model2 <- glm(swift_parrot ~ season, 
              data = nest_boxes_clean, 
              family = "binomial")

# Model with edge distance only: predicts Swift Parrot occupancy using edge distance as predictor
model3 <- glm(swift_parrot ~ edge_distance, 
              data = nest_boxes_clean, 
              family = "binomial")

# To view more info:
# model1 
# summary(model1)
# expo_tbl <- gtsummary::tbl_regression(model1,
                         # exponentiate = TRUE)
#as.data.frame(expo_tbl)


```

## f. Check the diagnostics

```{r diagnostics check all models}

# simulate residuals
# 
# Model 0 (null model with no predictors)
sim_res0 <- simulateResiduals(fittedModel = model0) |>  
plot()  


# Model 1 (season + edge_distance)
sim_res1 <- simulateResiduals(fittedModel = model1)  |>  
plot()                                       

# Model 2 (season only)
sim_res2 <- simulateResiduals(fittedModel = model2)  |>  
plot()                                       

# Model 3 (edge_distance only)
sim_res3 <- simulateResiduals(fittedModel = model3) |>  
plot()                                      



```


## g. Select the best model


```{r AIC}

# Calculate AIC for each model
model_aic <- AIC(model0,
                  model1, 
                  model2, 
                  model3)

# AIC table
model_aic

```

**Interpretation**

The best model predicting Swift Parrot nest box occupancy includes both season and distance from the forest edge (binomial GLM, AIC = 226.21, $\alpha$ = 0.05). 


## h. Visualize the model predictions 

```{r model prediction plot}


# Generate predicted values and confidence intervals from model1

model1_predictions <- ggpredict(model1, terms = 
                                  c("edge_distance",
                                    "season"))

ggplot(data = model1_predictions,  # Use model predictions data frame
       aes(x = x,                  # x-axis: distance from forest edge
           y = predicted,          # y-axis: predicted occupancy probability
           color = group,          # Line color mapped to season (group)
           fill = group)) +        # Fill color (for ribbons) mapped to season

  # Add semi-transparent points at predicted values
  geom_point(size = 2, alpha = 0.4) +  
  
  # Add shaded confidence interval ribbon for each season
  geom_ribbon(data = model1_predictions,  
              aes(ymin = conf.low, ymax = conf.high),  # Confidence bounds
              alpha = 0.4, color = NA) +  # No border around ribbons
  
  # Add prediction lines for each season
  geom_line(size = 0.7) +  

  # Add axis labels and legend titles
  labs(x = "Distance from forest edge (m)",   
       y = "Probability of swift parrot occupancy",  
       color = "Season",                      
       fill = "Season") +                     

  # Manually set custom colors for seasons (to match paper styling)
  scale_color_manual(values = c("2016" = "salmon", "2019" = "slateblue1")) +  
  scale_fill_manual(values = c("2016" = "salmon", "2019" = "slateblue1")) +   

  # Set y-axis limits and create evenly spaced tick marks
  scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +  

  # Use a clean, minimal theme without gridlines
  theme_classic()

```

## i. Write a caption for your figure.

**Figure 1.** Predicted probabilities and 95% confidence intervals from the best model of nest box occupancy by Swift Parrots, the target species of the restoration effort. The plot shows how the probability of occupancy changes with distance from the forest edge and between study seasons. Nest box occupancy was significantly lower in 2019 compared to 2016, with boxes in 2019 having 54% lower odds of occupancy (95% CI [0.23, 0.89], *p* = 0.022). For every additional meter from the forest edge, the odds of occupancy decreased by about 0.2% (95% CI: [0.997,0.999], *p* < 0.001)
*Data source:* Stojanovic et al. (2021), Restoration Ecology (DOI: 10.1111/rec.13319)


## j. Calculate model predictions

```{r predictions at 0 and 900}


# Predicted probabilities at 0 m and 900 m for each season

predictions_specific <- ggpredict(model1, 
                                  terms = c("edge_distance [0,900]", "season"))


preds_table <- as.data.frame(predictions_specific) |> # Convert to df
 rename(           # Rename columns
    `Edge Distance (m)` = x,
    Season = group,
    `Predicted Probability` = predicted,
    `Standard Error` = std.error,
    `95% CI Lower` = conf.low,
    `95% CI Upper` = conf.high
  ) |> 
   mutate(across(where(is.numeric), ~ round(.x, 3)))  # Round to 3 decimals



# Create flextable 

flextable(preds_table) |>
  set_caption("Table 1. Predicted probabilities of Swift Parrot nest box occupancy at 0 m and 900 m from forest edge by season.") |>  # Add title
  autofit() # Fits nicer

# kinda like this better:
predictions_specific


```

## k. Intepret your results

Swift Parrots are more likely to occupy nest boxes near the forest edge, and overall occupancy declined from 2016 to 2019 (Figure 1, Table 1). Nest boxes in 2019 had lower odds of occupancy by a factor of 0.46 (95% CI: [0.23, 0.89], p = 0.022). 

For every 1-meter increase in distance from the forest edge, the odds of occupancy decreased by a factor of 0.998 (95% CI: [0.997, 0.999], p < 0.001). In 2016, predicted occupancy dropped from 48% at the forest edge to 12% at 900 meters and in 2019, it dropped from 30% to just 6%. 

These patterns suggest that declining occupancy may be driven by competition for nest sites from invasive species such as starlings and tree martins.

# 4. Affective and exploratory visualizations 

## a. Comparing visualizations

**How are the visualizations different from each other in the way you have represented your data** 

In Homework 2, I used a boxplot and a line graph to explore my data, but these were not ideal choices for representing categorical variables. In contrast, the affective visualization in Homework 3 used a blinking light grid to visually show counts of service calls and whether lights were working or not, which made the patterns much clearer.

**What similarities do you see between all your visualizations?**  

All of my visualizations focused on the relationship between the service light’s working status and whether help was truly needed. They all aimed to highlight the issue of unnecessary calls and equipment failure, looking for patterns in help requests across conditions.

**What patterns do you see in each visualization? Are these different between visualizations? If so, why? If not, why not?**

In both Homework 2 and 3, I observed that false service calls were more common when the light was broken. While the visual choices in Homework 2 didn’t clearly show this pattern, the same relationship was still present. Homework 3’s stacked bar chart and blinking light grid were more effective at highlighting the high proportion of unnecessary calls when the lights were broken. The difference came down to how well each visualization matched the data type.

**What kinds of feedback did you get during week 9 in workshop or from the instructors? How did you implement or try those suggestions? If you tried and kept those suggestions, explain how and why; if not, explain why not.**  

My peers pointed out confusion about what the gray circles in my blinking light grid represented, since they were redundant with the red question marks used for unknown light status. I revised the visual by removing the gray circles and keeping only the red question marks to more clearly indicate unknown status and reduce visual clutter.

